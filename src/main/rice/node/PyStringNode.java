package main.rice.node;

import main.rice.obj.PyCharObj;
import main.rice.obj.PyStringObj;
import java.util.*;

/**
 * A representation of a node for generating PyStringObjs.
 */
public class PyStringNode extends AIterablePyNode<PyStringObj, PyCharObj> {

    /**
     * The domain of characters from which valid strings can be constructed.
     */
    private final List<PyCharObj> charDomain;

    /**
     * Constructor fot a PyStringNode; initializes its character domain.
     *
     * @param charDomain the valid characters for PyStringObjs generated by this node
     */
    public PyStringNode(Set<Character> charDomain) {
        this.charDomain = new ArrayList<>();
        for (Character javaChar: charDomain) {
            this.charDomain.add(new PyCharObj(javaChar));
        }
    }

    /**
     * Generates all valid PyStringObjs within the exhaustive domain; begins by generating
     * all valid characters, and then finds all permutations of them of valid length (as
     * constrained by the exhaustive domain).
     *
     * @return a set of PyStringObjs comprising the exhaustive domain
     */
    public Set<PyStringObj> genExVals() {
        return this.genPerms(new HashSet<>(this.charDomain));
    }

    /**
     * Helper function for generating a PyStringObj.
     *
     * @param innerVals the elements to be contained by the generated PyStringObj
     * @return a PyStringObj object encapsulating the innerVals
     */
    protected PyStringObj genObj(List<PyCharObj> innerVals) {
        return new PyStringObj(innerVals);
    }

    /**
     * Helper function for generating one random PyCharObj object.
     *
     * @return a randomly-generated object of type PyCharObj from this.charDomain
     */
    protected PyCharObj genRandInnerVal() {
        int choice = this.rand.nextInt(this.charDomain.size());
        return this.charDomain.get(choice);
    }
}